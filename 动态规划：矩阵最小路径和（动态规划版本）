矩阵最小路径和
给你一个二维数组，二维数组中的每个数都是正数，要求从左上角走到右下角，每一步只能向右或者向下。沿途经过的数字要累加起来。返回最小的路径和。

2、动态规划版本

递归版本虽然简单，但是时间复杂度过高，显然是不行的。通过分析发现，在递归过程中，会有很多重复的计算，如下图所示：



在计算(1,0)位置的右元素和计算(0,1)位置的下元素时，发生了重复计算：都是计算（1,1）位置到右下角的最小距离和。
这里只是分析了两步，如果继续分析，会出现很多类似的重复计算过程。

1、无后效性：无论（1,1）位置是从（1,0）位置来的还是（0,1）位置来的，都不影响（1,1）位置到右下角的最小距离的结果，这就叫做无后效性，反之则是有后效性。

2、无后效性一定可以改成递归版本。

3、汉诺塔问题：每步需要打印出轨迹，所以是有后效性的。

4、八皇后问题：前一步的选择会影响后一步的结果，是有后效性的。

那么我们是不是可以利用缓存将每次的计算结果存储起来，下一次再碰到相同元素计算的时候先去缓存中查找看是否已经计算过了，
如果存在则直接使用，在没有计算过的时候再去计算，并将结果存储到缓存中。很明显这样的缓存可以用map实现，元素对应key，结果对应value。


public class MinPath {
 
    // 动态规划版本
    public static int walkDynamic(int[][] matrix){
        if(matrix == null || matrix.length == 0 || matrix[0] == null || matrix[0].length == 0){
            return 0;
        }
        int lastRow = matrix.length - 1;
        int lastCol = matrix[0].length - 1;
        int[][] dp = new int[lastRow][lastCol];  // 状态表
 
        dp[lastRow][lastCol] = matrix[lastRow][lastCol];   // basecase：右下角到右下角的距离为其本身大小
 
        // 填充最后一行其他位置处的状态值
        for(int i = lastRow, j = lastCol - 1; j >= 0; j--){
            // 左边位置的值等于右边位置值加上它自身的值
            dp[i][j] = matrix[i][j] + dp[i][j + 1];
        }
 
        // 填充最后一列其他位置处的状态值
        for(int  j = lastCol, i = lastRow - 1; i >= 0; i--){
            // 上面的位置等于下面的位置值加上它本身的值
            dp[i][j] = matrix[i][j] + dp[i + 1][j];
        }
 
        // 填充一般位置（除最后一行和最右一列的位置）
        for(int i = lastRow - 1; i >=0; i--){
            for(int j = lastCol - 1; j >= 0; j--){
                // 一般位置：当前位置值 + min(下面位置值，右面位置值)
                dp[i][j] = matrix[i][j] + Math.min(dp[i + 1][j],dp[i][j + 1]);
            }
        }
        return dp[0][0];   // 返回目标值
    }
}
